// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ALU(	// src/main/scala/stages/ALU.scala:31:7
  input  [5:0]  io_alu_op,	// src/main/scala/stages/ALU.scala:32:16
  input  [31:0] io_alu_src1,	// src/main/scala/stages/ALU.scala:32:16
                io_alu_src2,	// src/main/scala/stages/ALU.scala:32:16
  output [31:0] io_alu_result	// src/main/scala/stages/ALU.scala:32:16
);

  wire [31:0] _io_alu_result_T_13 = io_alu_src1 | io_alu_src2;	// src/main/scala/stages/ALU.scala:40:45
  wire [62:0] _io_alu_result_T_16 = {31'h0, io_alu_src1} << io_alu_src2[4:0];	// src/main/scala/stages/ALU.scala:43:{43,58}
  wire [63:0] _io_alu_result_T_23 =
    {{32{io_alu_src1[31]}}, io_alu_src1} >> io_alu_src2[4:0];	// src/main/scala/stages/ALU.scala:43:58, :45:{34,39,55,75}
  assign io_alu_result =
    io_alu_op == 6'h2B
      ? io_alu_src2
      : io_alu_op == 6'h2A
          ? _io_alu_result_T_23[31:0]
          : io_alu_op == 6'h29
              ? io_alu_src1 >> io_alu_src2[4:0]
              : io_alu_op == 6'h28
                  ? _io_alu_result_T_16[31:0]
                  : io_alu_op == 6'h27
                      ? io_alu_src1 ^ io_alu_src2
                      : io_alu_op == 6'h26
                          ? _io_alu_result_T_13
                          : io_alu_op == 6'h25
                              ? ~_io_alu_result_T_13
                              : io_alu_op == 6'h24
                                  ? io_alu_src1 & io_alu_src2
                                  : io_alu_op == 6'h23
                                      ? {31'h0, io_alu_src1 < io_alu_src2}
                                      : io_alu_op == 6'h22
                                          ? {31'h0,
                                             $signed(io_alu_src1) < $signed(io_alu_src2)}
                                          : io_alu_op == 6'h21
                                              ? io_alu_src1 - io_alu_src2
                                              : io_alu_op == 6'h20
                                                  ? io_alu_src1 + io_alu_src2
                                                  : 32'h0;	// src/main/scala/config/Configs.scala:59:32, src/main/scala/stages/ALU.scala:31:7, :35:43, :36:43, :37:54, :38:47, :39:43, :40:{31,45}, :42:43, :43:{43,58}, :44:43, :45:{39,75,98}
endmodule

module IE(	// src/main/scala/stages/IE.scala:29:7
  input          clock,	// src/main/scala/stages/IE.scala:29:7
                 reset,	// src/main/scala/stages/IE.scala:29:7
                 io_ms_allowin,	// src/main/scala/stages/IE.scala:30:16
  output         io_es_allowin,	// src/main/scala/stages/IE.scala:30:16
  input          io_ds_to_es_valid,	// src/main/scala/stages/IE.scala:30:16
  input  [145:0] io_ds_to_es_bus,	// src/main/scala/stages/IE.scala:30:16
  output         io_es_to_ms_valid,	// src/main/scala/stages/IE.scala:30:16
  output [70:0]  io_es_to_ms_bus,	// src/main/scala/stages/IE.scala:30:16
  output         io_data_sram_en,	// src/main/scala/stages/IE.scala:30:16
  output [3:0]   io_data_sram_we,	// src/main/scala/stages/IE.scala:30:16
  output [31:0]  io_data_sram_waddr,	// src/main/scala/stages/IE.scala:30:16
                 io_data_sram_wdata	// src/main/scala/stages/IE.scala:30:16
);

  wire [31:0]  _alu_io_alu_result;	// src/main/scala/stages/IE.scala:63:21
  reg  [145:0] ds_to_es_bus_r;	// src/main/scala/stages/IE.scala:33:33
  reg          es_valid;	// src/main/scala/stages/IE.scala:34:27
  wire         io_es_allowin_0 = ~es_valid | io_ms_allowin;	// src/main/scala/stages/IE.scala:34:27, :36:{22,32}
  always @(posedge clock) begin	// src/main/scala/stages/IE.scala:29:7
    if (reset) begin	// src/main/scala/stages/IE.scala:29:7
      ds_to_es_bus_r <= 146'h0;	// src/main/scala/stages/IE.scala:33:33
      es_valid <= 1'h0;	// src/main/scala/stages/IE.scala:34:27
    end
    else begin	// src/main/scala/stages/IE.scala:29:7
      if (io_ds_to_es_valid & io_es_allowin_0)	// src/main/scala/stages/IE.scala:36:32, :41:29
        ds_to_es_bus_r <= io_ds_to_es_bus;	// src/main/scala/stages/IE.scala:33:33
      if (io_es_allowin_0)	// src/main/scala/stages/IE.scala:36:32
        es_valid <= io_ds_to_es_valid;	// src/main/scala/stages/IE.scala:34:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/stages/IE.scala:29:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/stages/IE.scala:29:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/stages/IE.scala:29:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/stages/IE.scala:29:7
      automatic logic [31:0] _RANDOM[0:4];	// src/main/scala/stages/IE.scala:29:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/stages/IE.scala:29:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/stages/IE.scala:29:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/stages/IE.scala:29:7
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/stages/IE.scala:29:7
        end	// src/main/scala/stages/IE.scala:29:7
        ds_to_es_bus_r =
          {_RANDOM[3'h0],
           _RANDOM[3'h1],
           _RANDOM[3'h2],
           _RANDOM[3'h3],
           _RANDOM[3'h4][17:0]};	// src/main/scala/stages/IE.scala:29:7, :33:33
        es_valid = _RANDOM[3'h4][18];	// src/main/scala/stages/IE.scala:29:7, :33:33, :34:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/stages/IE.scala:29:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/stages/IE.scala:29:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ALU alu (	// src/main/scala/stages/IE.scala:63:21
    .io_alu_op     (ds_to_es_bus_r[145:140]),	// src/main/scala/stages/IE.scala:33:33, :45:41
    .io_alu_src1   (ds_to_es_bus_r[138] ? ds_to_es_bus_r[32:1] : ds_to_es_bus_r[96:65]),	// src/main/scala/stages/IE.scala:33:33, :47:41, :54:41, :56:41, :65:27
    .io_alu_src2
      (ds_to_es_bus_r[137]
         ? ds_to_es_bus_r[128:97]
         : ds_to_es_bus_r[136] ? 32'h4 : ds_to_es_bus_r[64:33]),	// src/main/scala/stages/IE.scala:33:33, :48:41, :49:41, :53:41, :55:41, :66:{27,49}
    .io_alu_result (_alu_io_alu_result)
  );
  assign io_es_allowin = io_es_allowin_0;	// src/main/scala/stages/IE.scala:29:7, :36:32
  assign io_es_to_ms_valid = es_valid;	// src/main/scala/stages/IE.scala:29:7, :34:27
  assign io_es_to_ms_bus =
    {ds_to_es_bus_r[0],
     ds_to_es_bus_r[135],
     ds_to_es_bus_r[133:129],
     _alu_io_alu_result,
     ds_to_es_bus_r[32:1]};	// src/main/scala/stages/IE.scala:29:7, :33:33, :50:41, :52:41, :56:41, :57:41, :63:21, :70:27
  assign io_data_sram_en = 1'h1;	// src/main/scala/stages/IE.scala:29:7, :36:47
  assign io_data_sram_we = {1'h0, ds_to_es_bus_r[134] & es_valid, 2'h0};	// src/main/scala/stages/IE.scala:29:7, :33:33, :34:27, :51:41, :77:{21,27,38}
  assign io_data_sram_waddr = _alu_io_alu_result;	// src/main/scala/stages/IE.scala:29:7, :63:21
  assign io_data_sram_wdata = ds_to_es_bus_r[64:33];	// src/main/scala/stages/IE.scala:29:7, :33:33, :55:41
endmodule

