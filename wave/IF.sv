// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IF(	// src/main/scala/stages/IF.scala:30:7
  input         clock,	// src/main/scala/stages/IF.scala:30:7
                reset,	// src/main/scala/stages/IF.scala:30:7
                io_ds_allowin,	// src/main/scala/stages/IF.scala:31:16
  input  [31:0] io_inst_sram_rdata,	// src/main/scala/stages/IF.scala:31:16
  input  [32:0] io_br_bus,	// src/main/scala/stages/IF.scala:31:16
  output        io_fs_to_ds_valid,	// src/main/scala/stages/IF.scala:31:16
  output [63:0] io_fs_to_ds_bus,	// src/main/scala/stages/IF.scala:31:16
  output        io_inst_sram_en,	// src/main/scala/stages/IF.scala:31:16
  output [3:0]  io_inst_sram_we,	// src/main/scala/stages/IF.scala:31:16
  output [31:0] io_inst_sram_addr,	// src/main/scala/stages/IF.scala:31:16
                io_inst_sram_wdata	// src/main/scala/stages/IF.scala:31:16
);

  reg         fs_valid;	// src/main/scala/stages/IF.scala:35:27
  wire        fs_allowin = ~fs_valid | io_ds_allowin;	// src/main/scala/stages/IF.scala:35:27, :37:{22,32}
  reg  [31:0] fs_pc;	// src/main/scala/stages/IF.scala:44:24
  wire [31:0] _next_pc_T = fs_pc + 32'h4;	// src/main/scala/stages/IF.scala:44:24, :47:50
  always @(posedge clock) begin	// src/main/scala/stages/IF.scala:30:7
    if (reset) begin	// src/main/scala/stages/IF.scala:30:7
      fs_valid <= 1'h0;	// src/main/scala/stages/IF.scala:30:7, :35:27
      fs_pc <= 32'h1BFFFFFC;	// src/main/scala/stages/IF.scala:44:24
    end
    else begin	// src/main/scala/stages/IF.scala:30:7
      fs_valid <= fs_allowin | fs_valid;	// src/main/scala/stages/IF.scala:35:27, :37:32, :39:23, :40:18
      if (fs_allowin) begin	// src/main/scala/stages/IF.scala:37:32
        if (io_br_bus[32])	// src/main/scala/stages/IF.scala:45:29
          fs_pc <= io_br_bus[31:0];	// src/main/scala/stages/IF.scala:44:24, :46:30
        else	// src/main/scala/stages/IF.scala:45:29
          fs_pc <= _next_pc_T;	// src/main/scala/stages/IF.scala:44:24, :47:50
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/stages/IF.scala:30:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/stages/IF.scala:30:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/stages/IF.scala:30:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/stages/IF.scala:30:7
      automatic logic [31:0] _RANDOM[0:1];	// src/main/scala/stages/IF.scala:30:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/stages/IF.scala:30:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/stages/IF.scala:30:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/stages/IF.scala:30:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// src/main/scala/stages/IF.scala:30:7
        end	// src/main/scala/stages/IF.scala:30:7
        fs_valid = _RANDOM[1'h0][0];	// src/main/scala/stages/IF.scala:30:7, :35:27
        fs_pc = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][0]};	// src/main/scala/stages/IF.scala:30:7, :35:27, :44:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/stages/IF.scala:30:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/stages/IF.scala:30:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_fs_to_ds_valid = fs_valid;	// src/main/scala/stages/IF.scala:30:7, :35:27
  assign io_fs_to_ds_bus = {io_inst_sram_rdata, fs_pc};	// src/main/scala/stages/IF.scala:30:7, :44:24, :53:27
  assign io_inst_sram_en = fs_allowin;	// src/main/scala/stages/IF.scala:30:7, :37:32
  assign io_inst_sram_we = 4'h0;	// src/main/scala/stages/IF.scala:30:7, :57:21
  assign io_inst_sram_addr = io_br_bus[32] ? io_br_bus[31:0] : _next_pc_T;	// src/main/scala/stages/IF.scala:30:7, :45:29, :46:30, :47:{22,50}
  assign io_inst_sram_wdata = 32'h0;	// src/main/scala/stages/IF.scala:30:7, :59:24
endmodule

