// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IM(	// src/main/scala/stages/IM.scala:25:7
  input         clock,	// src/main/scala/stages/IM.scala:25:7
                reset,	// src/main/scala/stages/IM.scala:25:7
                io_ws_allowin,	// src/main/scala/stages/IM.scala:26:16
  output        io_ms_allowin,	// src/main/scala/stages/IM.scala:26:16
  input         io_es_to_ms_valid,	// src/main/scala/stages/IM.scala:26:16
  input  [70:0] io_es_to_ms_bus,	// src/main/scala/stages/IM.scala:26:16
  input  [31:0] io_data_sram_rdata,	// src/main/scala/stages/IM.scala:26:16
  output        io_ms_to_ws_valid,	// src/main/scala/stages/IM.scala:26:16
  output [69:0] io_ms_to_ws_bus	// src/main/scala/stages/IM.scala:26:16
);

  reg  [70:0] es_to_ms_bus_r;	// src/main/scala/stages/IM.scala:29:33
  reg         ms_valid;	// src/main/scala/stages/IM.scala:30:27
  wire        io_ms_allowin_0 = ~ms_valid | io_ws_allowin;	// src/main/scala/stages/IM.scala:30:27, :32:{22,32}
  always @(posedge clock) begin	// src/main/scala/stages/IM.scala:25:7
    if (reset) begin	// src/main/scala/stages/IM.scala:25:7
      es_to_ms_bus_r <= 71'h0;	// src/main/scala/stages/IM.scala:29:33
      ms_valid <= 1'h0;	// src/main/scala/stages/IM.scala:30:27
    end
    else begin	// src/main/scala/stages/IM.scala:25:7
      if (io_es_to_ms_valid & io_ms_allowin_0)	// src/main/scala/stages/IM.scala:32:32, :37:29
        es_to_ms_bus_r <= io_es_to_ms_bus;	// src/main/scala/stages/IM.scala:29:33
      if (io_ms_allowin_0)	// src/main/scala/stages/IM.scala:32:32
        ms_valid <= io_es_to_ms_valid;	// src/main/scala/stages/IM.scala:30:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/stages/IM.scala:25:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/stages/IM.scala:25:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/stages/IM.scala:25:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/stages/IM.scala:25:7
      automatic logic [31:0] _RANDOM[0:2];	// src/main/scala/stages/IM.scala:25:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/stages/IM.scala:25:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/stages/IM.scala:25:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/stages/IM.scala:25:7
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/stages/IM.scala:25:7
        end	// src/main/scala/stages/IM.scala:25:7
        es_to_ms_bus_r = {_RANDOM[2'h0], _RANDOM[2'h1], _RANDOM[2'h2][6:0]};	// src/main/scala/stages/IM.scala:25:7, :29:33
        ms_valid = _RANDOM[2'h2][7];	// src/main/scala/stages/IM.scala:25:7, :29:33, :30:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/stages/IM.scala:25:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/stages/IM.scala:25:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_ms_allowin = io_ms_allowin_0;	// src/main/scala/stages/IM.scala:25:7, :32:32
  assign io_ms_to_ws_valid = ms_valid;	// src/main/scala/stages/IM.scala:25:7, :30:27
  assign io_ms_to_ws_bus =
    {es_to_ms_bus_r[69:64],
     es_to_ms_bus_r[70] ? io_data_sram_rdata : es_to_ms_bus_r[63:32],
     es_to_ms_bus_r[31:0]};	// src/main/scala/stages/IM.scala:25:7, :29:33, :42:41, :45:41, :46:41, :49:30, :50:27
endmodule

