package CPU

import chisel3._
import chisel3.util._

import Parameters._

trait InstType {  // 指令类型
    def Inst2R      = "b0000010".U
    def Inst3R      = "b0000011".U
    def Inst4R      = "b0000100".U

    def Inst2RI8    = "b0000000".U
    def Inst2RI12   = "b0000001".U //至少ori的立即数需要零拓展
    def Inst2RI14   = "b0000101".U
    def Inst2RI16   = "b0100110".U
    def Inst2RI20   = "b0000111".U // add
    def Inst2RI26   = "b1001000".U // add
    def Inst2RUI5   = "b0001001".U // add
    def Inst2RUI6   = "b0001010".U // add

    def Inst1RI21   = "b0010000".U
    def Inst1RCSR   = "b0010001".U //add
    def InstI26     = "b0010010".U

    // def IsWriteReg(instType: UInt): Bool = !instType(4)  // 是否写寄存器
    def OffWhich(instType: UInt): UInt = instType(6, 5)  // 偏移的形式地址是什么类型
    def IsBranch(instType: UInt): Bool = OffWhich(instType) =/= 0.U && instType =/= 0.U   // 是否分支
    def apply() = UInt(7.W) 
}

object OffType {
    def off_rj_or_direct = "b01".U
    def off_pc = "b10".U
    def apply() = UInt(2.W)
}

object FuncType {  //功能类型
    def non = "b00".U
    def alu = "b01".U
    def mem = "b10".U
    def dec = "b11".U
    def apply() = UInt(2.W)
}

object AluOpType {
    def non     = "b000000".U
    def add     = "b000001".U
    def sub     = "b000010".U
    def slt     = "b000011".U
    def sltu    = "b000100".U
    def and     = "b000101".U
    def nor     = "b000110".U
    def or      = "b000111".U
    def xor     = "b001000".U
    def sll     = "b001001".U
    def srl     = "b001010".U
    def sra     = "b001011".U
    def lui     = "b001100".U
    def apply() = UInt(6.W)
}

object MemOpType {
    def read    = "b0".U
    def write   = "b1".U
    def apply() = UInt(1.W)
}

object DecOpType {
    def branch  = "b0".U
    def jump    = "b1".U
    def apply() = UInt(1.W)
}

object IsWf {
    def y = "b1".U
    def n = "b0".U
    def apply() = UInt(1.W)
}

object LA64_ALUInst extends InstType with Parameters {
    def ADD_W       = BitPat("b00000000000100000???????????????")
    // def ADD_D       = BitPat("b00000000000100001???????????????")
    def SUB_W       = BitPat("b00000000000100010???????????????")
    // def SUB_D       = BitPat("b00000000000100011???????????????")
    def SLT         = BitPat("b00000000000100100???????????????")
    def SLTU        = BitPat("b00000000000100101???????????????")
    def NOR         = BitPat("b00000000000101000???????????????")
    def AND         = BitPat("b00000000000101001???????????????")
    def OR          = BitPat("b00000000000101010???????????????")
    def ORI         = BitPat("b0000001110??????????????????????")//u,add
    def XOR         = BitPat("b00000000000101011???????????????")
    def SLLI_W      = BitPat("b00000000010000001???????????????")
    def SRLI_W      = BitPat("b00000000010001001???????????????") 
    def SRAI_W      = BitPat("b00000000010010001???????????????")
    def ADDI_W      = BitPat("b0000001010??????????????????????") 
    def LD_W        = BitPat("b0010100010??????????????????????")  
    def ST_W        = BitPat("b0010100110??????????????????????")   
    def JIRL        = BitPat("b001101??????????????????????????")   
    def B           = BitPat("b001110??????????????????????????")  
    def BL          = BitPat("b001111??????????????????????????")
    def BEQ         = BitPat("b010000??????????????????????????")    
    def BNE         = BitPat("b010001??????????????????????????")
    def LU12I_W     = BitPat("b0001010?????????????????????????")
    def CSRWR       = BitPat("b00000100??????????????00001?????")//add

    // def ADDI_W      = BitPat("b0000001010??????????????????????")
    // def ADDI_D      = BitPat("b0000001011??????????????????????")
    // def ADDU16I_D   = BitPat("b000100??????????????????????????")
    // def ALSL_W      = BitPat("b000000000000010?????????????????")
    // def ALSL_WU     = BitPat("b000000000000011?????????????????")
    // def ALSL_D      = BitPat("b00000000001011??????????????????")
    // def LU12I_W     = BitPat("b0001010?????????????????????????")
    // def LU32I_D     = BitPat("b0001011?????????????????????????")
    // def LU52I_D     = BitPat("b0000001100??????????????????????")

    val table = Array (
        ADD_W     -> List(Inst3R,      FuncType.alu,   AluOpType.add,   IsWf.y ),//isWriteReg
        // ADD_D     -> List(Inst2R, FuncType.alu, ALUOpType.add)
        SUB_W     -> List(Inst3R,      FuncType.alu,   AluOpType.sub,   IsWf.y ),//isWriteReg
        // SUB_D     -> List(Inst2R, FuncType.alu, ALUOpType.sub)
        SLT       -> List(Inst3R,      FuncType.alu,   AluOpType.slt,   IsWf.y ),//isWriteReg   
        SLTU      -> List(Inst3R,      FuncType.alu,   AluOpType.sltu,  IsWf.y ),//isWriteReg
        NOR       -> List(Inst3R,      FuncType.alu,   AluOpType.nor,   IsWf.y ),//isWriteReg
        AND       -> List(Inst3R,      FuncType.alu,   AluOpType.and,   IsWf.y ),//isWriteReg
        OR        -> List(Inst3R,      FuncType.alu,   AluOpType.or,    IsWf.y ),//isWriteReg
        ORI       -> List(Inst2RI12,   FuncType.alu,   AluOpType.or,    IsWf.y ),//isWriteReg
        XOR       -> List(Inst3R,      FuncType.alu,   AluOpType.xor,   IsWf.y ),//isWriteReg
        SLLI_W    -> List(Inst2RUI5,   FuncType.alu,   AluOpType.sll,   IsWf.y ),//isWriteReg
        SRLI_W    -> List(Inst2RUI5,   FuncType.alu,   AluOpType.srl,   IsWf.y ),//isWriteReg
        SRAI_W    -> List(Inst2RUI5,   FuncType.alu,   AluOpType.sra,   IsWf.y ),//isWriteReg
        ADDI_W    -> List(Inst2RI12,   FuncType.alu,   AluOpType.add,   IsWf.y ),//isWriteReg
        LD_W      -> List(Inst2RI12,   FuncType.mem,   MemOpType.read,  IsWf.y ),//isWriteReg
        ST_W      -> List(Inst2RI12,   FuncType.mem,   MemOpType.write, IsWf.n ),
        JIRL      -> List(Inst2RI16,   FuncType.alu,   AluOpType.add,   IsWf.y ),//isWriteReg
        B         -> List(Inst2RI26,   FuncType.non,   AluOpType.non,   IsWf.n ),
        BL        -> List(Inst2RI26,   FuncType.alu,   AluOpType.add,   IsWf.y ),//isWriteReg
        BEQ       -> List(Inst2RI16,   FuncType.non,   AluOpType.non,   IsWf.n ),
        BNE       -> List(Inst2RI16,   FuncType.non,   AluOpType.non,   IsWf.n ),
        LU12I_W   -> List(Inst2RI20,   FuncType.alu,   AluOpType.lui,   IsWf.y ),//isWriteReg
        // CSRWR     -> List(Inst1RCSR,   FuncType.alu,   AluOpType.add    )//add
    )
}